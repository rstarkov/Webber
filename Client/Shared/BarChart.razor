<svg width="100%" height="100%">
    <g>
        @{
            double barWidth = (100 - BarSpacing * (BarCount - 1)) / BarCount;
            double x = 100 - barWidth;
            var sb = new System.Text.StringBuilder();
            @foreach (var pt in Data.Reverse())
            {
                string makeRect(double value, string color)
                    => $"<rect x='{x:0.000}%' y='{(Downwards ? 0 : (100 - value * 100)):0.000}%' width='{barWidth:0.000}%' height='{value * 100:0.000}%' stroke-width='0' fill='{color}'></rect>";
                sb.Append(makeRect(pt.Value, pt.Color));
                if (pt.Color2 != null) sb.Append(makeRect(pt.Value2, pt.Color2));
                if (pt.Color3 != null) sb.Append(makeRect(pt.Value3, pt.Color3));
                if (pt.Color4 != null) sb.Append(makeRect(pt.Value4, pt.Color4));
                x -= barWidth + BarSpacing;
            }
            @(new MarkupString(sb.ToString()))
        }
    </g>
</svg>

@code {
    public record class Pt
    {
        public string Color = "";
        public double Value; // 0..1

        public string Color2 = "";
        public double Value2; // 0..1

        public string Color3 = "";
        public double Value3; // 0..1

        public string Color4 = "";
        public double Value4; // 0..1
    }

    [Parameter]
    public Pt[] Data { get; set; } = new Pt[0];

    [Parameter]
    public int BarCount { get; set; } = 10;

    [Parameter]
    public double BarSpacing { get; set; } = 0.2;

    [Parameter]
    public bool Downwards { get; set; } = false;

    public static double ModifiedLog(double value, double newBase)
    {
        return value >= newBase ? Math.Log(value, newBase) : value / newBase;
    }

    public static double ScaleY(double value, double min, double max, Func<double, double> transform)
    {
        if (transform == null) transform = x => x;
        return (transform(value) - transform(min)) / (transform(max) - transform(min));
    }

    private DateTime _shouldRenderAt = DateTime.UtcNow;
    private Pt[] _lastData;

    protected override bool ShouldRender()
    {
        var should = _lastData == null || _lastData.Length != Data.Length || !_lastData.Zip(Data).All(x => x.First == x.Second);
        if (should)
            _shouldRenderAt = DateTime.UtcNow;
        return should;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        //Console.WriteLine($"BarChart OnAfterRender: {(DateTime.UtcNow - _shouldRenderAt).TotalMilliseconds:#,0}ms");
        _lastData = Data;
    }
}
