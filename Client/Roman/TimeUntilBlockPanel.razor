@using Webber.Client.Models

<BlockPanel TDto="TimeUntilBlockDto">
    <div class="CalContent">
        @if (context.LastUpdate != null)
        {
            string prevGroup = null;
            foreach (var entry in context.LastUpdate.Events)
            {
                var curGroup = entry.StartTimeUtc < DateTime.Today.AddDays(1) ? "today" : entry.StartTimeUtc < DateTime.Today.AddDays(2) ? "tomorrow" : "rest";
                var groupClass = prevGroup == null || prevGroup == curGroup ? "" : "newGroup";
                <div class=@groupClass>@strTimestamp(entry.StartTimeUtc)</div>
                <div class=@($"{groupClass} {descClass(entry)}")>@entry.DisplayName</div>
                prevGroup = curGroup;
            }
        }
    </div>
</BlockPanel>

@code {
    private RenderFragment strTimestamp(DateTime start)
    {
        var left = start - DateTime.UtcNow;
        if (left.TotalMinutes < 60)
            return @<span><span class=timeMins>@($"{start:HH:mm}")</span><span class=leftMins>@($"{Math.Floor(left.TotalMinutes):0}min")</span></span>;
        if (start < DateTime.Today.AddDays(1))
            return @<span><span class=timeHrs>@($"{start:HH:mm}")</span><span class=leftHrs>@($"{left.TotalHours:0.0}hr")</span></span>;
        if (start < DateTime.Today.AddDays(2))
            return @<span><span class=timeTmrw>@($"{start:HH:mm}")</span><span class=leftTmrw>@($"{left.TotalHours:0.0}hr")</span></span>;
        if (start < DateTime.Today.AddDays(8))
            return @<span><span class=timeWeek>@($"{start:HH:mm}")</span><span class=leftWeek>@($"{start:ddd}")</span></span>;
        return @<span><span class=timeLong>@($"{(start.Date - DateTime.Today).TotalDays:0} days")</span></span>;
    }

    private string descClass(CalendarEvent evt)
    {
        if ((evt.StartTimeUtc - DateTime.UtcNow).TotalMinutes < 60) return "descMins";
        if (evt.StartTimeUtc < DateTime.Today.AddDays(1)) return "descHrs";
        if (evt.StartTimeUtc < DateTime.Today.AddDays(2)) return "descTmrw";
        if (evt.StartTimeUtc < DateTime.Today.AddDays(8)) return "descWeek";
        return "descLong";
    }
}