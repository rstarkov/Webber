@using Webber.Client.Models

<BlockPanel TDto="RouterBlockDto">
    @if (context.LastUpdate != null)
    {
        <div class="Grid">
            <div class="Label KB">KB/s</div>
            <div class="Label">Recent traffic</div>
            <div></div>
@*            <div class="Label">Hourly traffic</div>
            <div class="Label KB">KB/s</div>
*@
            <div class="Label">@rate2str(context.LastUpdate.TxLast)</div>
            <div class="Chart Downwards">
                <BarChart BarCount=24 Data=@context.LastUpdate.HistoryRecent.Select(GetTxPt).ToArray() Downwards=true />
            </div>
            <div class="Label Up">Up</div>
@*            <div class="Chart Downwards">
                <BarChart BarCount=24 Data=@context.LastUpdate.HistoryHourly.Select(GetTxPt).ToArray() Downwards=true />
            </div>
            <div class="Label">@rate2str(context.LastUpdate.TxAverageRecent)</div>
*@
            <div class="Label">@rate2str(context.LastUpdate.RxLast)</div>
            <div class="Chart">
                <BarChart BarCount=24 Data=@context.LastUpdate.HistoryRecent.Select(GetRxPt).ToArray() />
            </div>
            <div class="Label Dn">Dn</div>
@*            <div class="Chart">
                <BarChart BarCount=24 Data=@context.LastUpdate.HistoryHourly.Select(GetRxPt).ToArray() />
            </div>
            <div class="Label">@rate2str(context.LastUpdate.RxAverageRecent)</div>
*@        </div>
    }
</BlockPanel>

@code {
    private string rate2str(int rate) => rate >= 1_000_000 ? $"{rate / 1_000_000:0.0}M" : $"{rate / 1000:#,0}";

    private BarChart.Pt GetPt(double? val, double max, string c1, string c2, string c3, string c4)
    {
        if (val == null)
            return new BarChart.Pt { Value = 1.0, Color = "#404040" };
        return new BarChart.Pt
            {
                Value = BarChart.ScaleY(val.Value, max / 1000, max, x => Math.Log(x, 10)),
                Color = val < max / 100 ? c1 : val < max / 10 ? c2 : val < max * 0.6 ? c3 : c4,
            };
    }

    private BarChart.Pt GetTxPt(RouterBlockDto.HistoryPoint pt)
        => GetPt(pt?.TxRate, 762_500, "#05305c", "#0959aa", "#1985f3", "#64adf7");

    private BarChart.Pt GetRxPt(RouterBlockDto.HistoryPoint pt)
        => GetPt(pt?.RxRate, 12_625_000, "#573805", "#966008", "#ed980d", "#f6bb5a");
}